<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <NuGetPublishFeed>https://dotnet.myget.org/f/aspnetcore-ci-release</NuGetPublishFeed>
    <NpmRegistry>$(NuGetPublishFeed)/npm/</NpmRegistry>
    <BuildDependsOn>$(BuildDependsOn);RunVerifier;_UpdateDependenciesFileInKorebuild;RunSplitPackages;PublishNpmModules</BuildDependsOn>
  </PropertyGroup>
  
  <Target Name="RunVerifier">
    <Error Text="BUILD_SHARE not specified." Condition="'$(BUILD_SHARE)'==''" />
    
    <PropertyGroup>
      <BUILD_BRANCH Condition="'$(BUILD_BRANCH)'==''">2.0.0-preview2</BUILD_BRANCH>
      <COHERENCE_UNIVERSECOHERENCE_BUILD_NUMBER Condition="'$(COHERENCE_UNIVERSECOHERENCE_BUILD_NUMBER)'==''">Latest</COHERENCE_UNIVERSECOHERENCE_BUILD_NUMBER>
      <COHERENCE_CORECLR_BUILD_NUMBER Condition="'$(COHERENCE_CORECLR_BUILD_NUMBER)'==''">Latest</COHERENCE_CORECLR_BUILD_NUMBER>
      <DISABLE_PARTNER_COHERENCE_CHECK Condition="'$(DISABLE_PARTNER_COHERENCE_CHECK)'==''">false</DISABLE_PARTNER_COHERENCE_CHECK>
    </PropertyGroup>
    
    <ItemGroup>
      <VerifierArgsList Include="
          --drop-folder &quot;$(BUILD_SHARE) &quot;;
          --build-branch $(BUILD_BRANCH);
          --output-path &quot;$(ArtifactsDir) &quot;;
          --universecoherence-build $(COHERENCE_UNIVERSECOHERENCE_BUILD_NUMBER);
          --coreclr-build $(COHERENCE_CORECLR_BUILD_NUMBER)"/>
      
      <VerifierArgsList Include="--disable-product-package-verification" Condition="'$(DISABLE_COHERENCE_CHECK)'=='true'"/>
      <VerifierArgsList Include="--disable-partner-package-verification" Condition="'$(DISABLE_PARTNER_COHERENCE_CHECK)'=='true'"/>
    </ItemGroup>

    <ItemGroup Condition="'$(APIKEY)'!=''">
      <VerifierArgsList Include="--nuget-publish-feed $(NuGetPublishFeed)" />
      <VerifierArgsList Include="--api-key $(APIKEY)" />
    </ItemGroup>
    
    <PropertyGroup>
      <VerifierProjectDirectory>$(RepositoryRoot)tools\CoherenceBuild\</VerifierProjectDirectory>
      <VerifierArgs>@(VerifierArgsList, ' ')</VerifierArgs>
    </PropertyGroup>

    <Exec Command="dotnet run $(VerifierArgs)" WorkingDirectory="$(VerifierProjectDirectory)" />
  </Target>

  <Target Name="RunSplitPackages" DependsOnTargets="RunResolvePackageDependencies;_FindDotNetPath">
    <ItemGroup>
      <SplitPackagePath Include="%(PackageDefinitions.ResolvedPath)" Condition="'%(PackageDefinitions.Name)'=='SplitPackages'" />
    </ItemGroup>
    <PropertyGroup>
      <ProductPackagesSource>$(ArtifactsDir)product-packages</ProductPackagesSource>
      <SplitPackagesCsv>$(RepositoryRoot)packages\packages.csv</SplitPackagesCsv>
      <SplitPackagesBinary>@(SplitPackagePath)\SplitPackages.dll</SplitPackagesBinary>
      <SplitPackagesArgs>--source $(ProductPackagesSource) --csv $(SplitPackagesCsv) --destination $(ArtifactsDir)</SplitPackagesArgs>
    </PropertyGroup>

    <Exec Command="&quot;$(DotNetPath)&quot; &quot;$(SplitPackagesBinary)&quot; $(SplitPackagesArgs)" />

    <RemoveDir Directories="$(ProductPackagesSource)" />
  </Target>

  <Target Name="PublishNpmModules" Condition="'$(APIKEY)' != ''">
    <PropertyGroup>
      <AuthTokenSetting>$(NpmRegistry.Replace("https:", "")):_authToken</AuthTokenSetting>
    </PropertyGroup>
    
    <ItemGroup>
      <NpmModule Include="$(ArtifactsDir)build\*.tgz" />
    </ItemGroup>
    
    <Exec Command="npm config set &quot;$(AuthTokenSetting)&quot; $(APIKEY)" />
    <Exec Command="npm publish --registry $(NpmRegistry) &quot;%(NpmModule.Identity)&quot;" ContinueOnError="true">
      <Output TaskParameter="ExitCode" ItemName="ExitCodes" />
    </Exec>
    <Exec Command="npm config delete $(AuthTokenSetting)" />
    <Error Text="Publishing npm modules failed" Condition="%(ExitCodes.Identity) > 0"/>
  </Target>

  <Target Name="_FindDotNetPath">
    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>
  </Target>

  <Target Name="_UpdateDependenciesFileInKorebuild">
    <PropertyGroup>
      <KoreBuildRepo>git@github.com:aspnet/KoreBuild.git</KoreBuildRepo>
      <KoreBuildBranch>rel/2.0.0-preview2</KoreBuildBranch>
      <KoreBuildCloneDirectory>$(RepositoryRoot).korebuild\</KoreBuildCloneDirectory>
      <GitUser>ASP.NET Push Bot</GitUser>
      <GitEmail>asplab@microsoft.com</GitEmail>
      <GitAuthor>$(GitUser) &lt;$(GitEmail)&gt;</GitAuthor>
      <GitConfigurationOptions>-c user.name=&quot;$(GitUser)&quot; -c user.email=&quot;$(GitEmail)&quot;</GitConfigurationOptions>
      <SourceDependenciesFilePath>$(ArtifactsDir)dependencies.props</SourceDependenciesFilePath>
      <KorebuildDependenciesFilePath>$(KoreBuildCloneDirectory)build\dependencies.props</KorebuildDependenciesFilePath>
    </PropertyGroup>
    
    <RemoveDir Directories="$(KoreBuildCloneDirectory)" Condition="Exists('$(KoreBuildCloneDirectory)')" />
    <Exec Command="git clone $(KoreBuildRepo) -b $(KoreBuildBranch) $(KoreBuildCloneDirectory)" />
    
    <Error Condition="!Exists('$(SourceDependenciesFilePath)')"
      Text="Could not find dependencies file: '$(SourceDependenciesFilePath)''" />
    
    <Copy SourceFiles="$(SourceDependenciesFilePath)" DestinationFolder="$(KoreBuildCloneDirectory)build" />
    
    <Exec
      Command="git $(GitConfigurationOptions) add $(KorebuildDependenciesFilePath)"
      WorkingDirectory="$(KoreBuildCloneDirectory)" />

    <Exec
      Command="git $(GitConfigurationOptions) commit -q --author=&quot;$(GitAuthor)&quot; -m &quot;Updated dependencies&quot;"
      IgnoreExitCode="true"
      WorkingDirectory="$(KoreBuildCloneDirectory)">
      <Output TaskParameter="ExitCode" PropertyName="CommitExitCode"/>
    </Exec>

    <Exec
      Command="git $(GitConfigurationOptions) push -q $(KoreBuildRepo) $(KoreBuildBranch):$(KoreBuildBranch)"
      WorkingDirectory="$(KoreBuildCloneDirectory)"
      Condition="'$(CommitExitCode)'=='0'" />
  </Target>
</Project>