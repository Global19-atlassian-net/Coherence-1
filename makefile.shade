use namespace="System"
use namespace="System.Collections.Concurrent"
use namespace="System.Diagnostics"
use namespace="System.IO"
use import="Files"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_BRANCH='${Environment.GetEnvironmentVariable("BUILD_BRANCH")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default SANITY_CHECKER='${Path.Combine(SRC_DIR, "SanityCheck")}'
default NUGET_FEED='${Environment.GetEnvironmentVariable("NUGET_FEED")}'
default NUGET_SYMBOLS_FEED='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_FEED")}'
default DROP_SHARE='${Environment.GetEnvironmentVariable("DROP_SHARE")}'
default PACKAGE_DROP_SHARE='${Environment.GetEnvironmentVariable("PACKAGE_DROP_SHARE")}'
default NUGET_SYMBOLS_SHARE='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_SHARE")}'
default SYMBOLS_NUGET_EXE='${Environment.GetEnvironmentVariable("SYMBOLS_NUGET_EXE")}'

use-standard-lifecycle

#delete-old-packages target="clean"
    @{
        if (string.IsNullOrEmpty(PACKAGE_DROP_SHARE))
        {
          Log.Warn("PACKAGE_DROP_SHARE environment varible is not set");
          return;
        }

        var files = Directory.EnumerateFiles(PACKAGE_DROP_SHARE, "*.nupkg").ToList();
        var symbolsFiles = files.Where(f => f.EndsWith(".symbols.nupkg", StringComparison.OrdinalIgnoreCase));
        var regularFiles = files.Except(symbolsFiles);

        DeleteOldFiles(symbolsFiles);
        DeleteOldFiles(regularFiles);
    }

#compile-sanity-check target='compile'
  build projectFile='${Path.Combine(SANITY_CHECKER, "SanityCheck.csproj")}'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }
  }

  exec program='${Path.Combine(SANITY_CHECKER, "bin", "Release", "SanityCheck.exe")}' commandline='${BUILD_SHARE} ${BUILD_BRANCH} ${BUILD_DIR} ${SYMBOLS_DIR} ${NUGET_SYMBOLS_SHARE} ${SYMBOLS_NUGET_EXE} '

functions @{
    private void DeleteOldFiles(IEnumerable<string> files)
    {
        const int LeavePackagesAloneCount = 3;
        var groups = files.Select(PackageInfo.FromPath)
                          .GroupBy(p => p.Id, StringComparer.OrdinalIgnoreCase)
                          .Where(p => p.Count() > LeavePackagesAloneCount);
        foreach (var item in groups)
        {
            var packagesToDelete = item.OrderByDescending(p => p.Version, StringComparer.OrdinalIgnoreCase)
                                       .Skip(LeavePackagesAloneCount);
            Log.Info("Deleting " + item.Key + " versions: " + string.Join(",", item.Select(p => p.Version)));
            foreach (var packageInfo in packagesToDelete)
            {
                try
                {
                    File.Delete(packageInfo.Path);
                } catch(IOException) {}
            }
        }
    }
    
    private class PackageInfo : IEquatable<PackageInfo>
    {
        private static readonly Regex _packageNameRegex = new Regex(@"^(?<id>.+?)\.(?<version>[0-9].*)$");
        private string _hash;
        
        public string Id { get; set; }
            
        public string Version { get; set; }
        
        public string Path { get; private set; }
        
        public string Hash 
        { 
            get
            {
                if (_hash == null)
                {
                    using (var md5 = System.Security.Cryptography.MD5.Create())
                    using (var fileStream = File.OpenRead(Path))
                    {
                        _hash = Convert.ToBase64String(md5.ComputeHash(fileStream));
                    }
                }
                return _hash;
            }
            set
            {
                _hash = value;
            }
        }
            
        public static PackageInfo FromPath(string path)
        {
            var fileName = System.IO.Path.GetFileNameWithoutExtension(path);
            var match = _packageNameRegex.Match(fileName);
            if (!match.Success)
            {
                throw new InvalidOperationException("Can't parse file " + path);
            }
            return new PackageInfo
            {
              Id = match.Groups["id"].Value,
              Version = match.Groups["version"].Value,
              Path = path
            };
        }
        
        public bool Equals(PackageInfo other)
        {
            return string.Equals(Id, other.Id, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals(Version, other.Version, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals(Hash, other.Hash, StringComparison.OrdinalIgnoreCase);
        }
    }
}
  
macro name='NuGetPush' source='string' nupkgFile='string'
  nuget-push
