use namespace="System"
use namespace="System.Diagnostics"
use namespace="System.IO"
use namespace="System.Threading.Tasks"
use import="Files"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default SANITY_CHECKER='${Path.Combine(SRC_DIR, "SanityCheck")}'
default NUGET_FEED='${Environment.GetEnvironmentVariable("NUGET_FEED")}'
default NUGET_SYMBOLS_FEED='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_FEED")}'

use-standard-lifecycle

#compile-sanity-check target='compile'
  build projectFile='${Path.Combine(SANITY_CHECKER, "SanityCheck.csproj")}'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }
  }

  exec program='${Path.Combine(SANITY_CHECKER, "bin", "Release", "SanityCheck.exe")}' commandline='${BUILD_SHARE} ${BUILD_DIR} ${SYMBOLS_DIR}'
  
#publish-packages target="package"
  @{
      if (string.IsNullOrEmpty(NUGET_FEED)) {
        Log.Warn("NUGET_FEED environment varible is not set.");
        Environment.Exit(-1);
        return;
      }
      
      var packages = Directory.EnumerateFiles(BUILD_DIR, "*.nupkg");
      Parallel.ForEach(packages, new ParallelOptions { MaxDegreeOfParallelism  = 5 }, package => 
      {
        bool symbols = package.EndsWith(".symbols.nupkg", StringComparison.OrdinalIgnoreCase);
        
        if (symbols)
        {
            NuGetPush(NUGET_SYMBOLS_FEED, package);
        }
        else
        {
            NuGetPush(NUGET_FEED, package);
        }
      });
  }
  
macro name='NuGetPush' source='string' nupkgFile='string'
  nuget-push
