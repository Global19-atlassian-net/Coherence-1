use namespace="System"
use namespace="System.Collections.Generic"
use namespace="System.Diagnostics"
use namespace="System.IO"
use namespace="System.Linq"
use import="BuildEnv"
use import="Environment"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default COHERENCE_BUILD_PROJ='${Path.Combine(SRC_DIR, "CoherenceBuild")}'

- // Required environment variables
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_BRANCH='${Environment.GetEnvironmentVariable("BUILD_BRANCH")}'
default PACKAGE_DROP_SHARE='${Environment.GetEnvironmentVariable("PACKAGE_DROP_SHARE")}'
default NUGET_SYMBOLS_SHARE='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_SHARE")}'
default SYMBOLS_NUGET_EXE='${Environment.GetEnvironmentVariable("SYMBOLS_NUGET_EXE")}'
default NUGET_PUBLISH_FEED='${Environment.GetEnvironmentVariable("NUGET_PUBLISH_FEED")}'
default APIKEY='${Environment.GetEnvironmentVariable("APIKEY")}'

use-standard-lifecycle

#package-restore target='initialize'
  exec program='cmd' commandline='/C dnu restore'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }

      Directory.CreateDirectory(TARGET_DIR);
   }

  var args = '--drop-folder ${BUILD_SHARE} --build-branch ${BUILD_BRANCH} --output-path ${BUILD_DIR} --symbols-source-path ${SYMBOLS_DIR} --symbols-output-path ${NUGET_SYMBOLS_SHARE} --symbols-nuget-exe ${SYMBOLS_NUGET_EXE} --nuget-publish-feed ${NUGET_PUBLISH_FEED} --apikey ${APIKEY}'
  exec program='cmd' commandline='/C dnx CoherenceBuild ${args}' workingdir='${COHERENCE_BUILD_PROJ}'

#clean-ci-packages target='package'
  @{
      Log.Info("Removing old packages from latest folder");

      if (string.IsNullOrEmpty(PACKAGE_DROP_SHARE))
      {
          Log.Warn("PACKAGE_DROP_SHARE environment varible is not set");
          return;
      }

      var latestPackageFolders = Directory.GetDirectories(PACKAGE_DROP_SHARE);
      var coherentPackageNames = Directory.GetFiles(BUILD_DIR, "*.nupkg").Select(p => Path.GetFileNameWithoutExtension(p));

      var delete = new List<string>();
      foreach (var latestPackageFolder in latestPackageFolders)
      {
          var projectName = Path.GetFileName(latestPackageFolder);

          var matchedVersion = new HashSet<string>(
              coherentPackageNames
                  .Where(packageName => packageName.IndexOf(projectName) == 0)
                  .Select(packageName => packageName.Substring(projectName.Length + 1)));

          if (matchedVersion.Any())
          {
              delete.AddRange(Directory.GetDirectories(latestPackageFolder)
                                       .Where(p => !matchedVersion.Contains(Path.GetFileName(p))));
          }
          else
          {
              delete.Add(latestPackageFolder);
              Log.Warn(string.Format("Project {0} doesn't exist in this Coherence build hence it will be deleted from {1}",
                  projectName, PACKAGE_DROP_SHARE));
          }
      }

      foreach (var d in delete)
      {
          Log.Info(string.Format("Delete folder {0}", d));

          Directory.Delete(d, recursive: true);
      }
  }
