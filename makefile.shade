use namespace="System"
use namespace="System.Net"
use namespace="System.Linq"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default TOOLS_DOWNLOAD_PATH='${Path.Combine(BASE_DIR, ".build")}'
default COHERENCE_BUILD_PROJ='${Path.Combine(SRC_DIR, "CoherenceBuild")}'
default SPLIT_CSV_PATH='${Path.Combine(BASE_DIR, "packages", "packages.csv")}'

- // Required environment variables
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_BRANCH='${Environment.GetEnvironmentVariable("BUILD_BRANCH")}'
default PACKAGE_DROP_SHARE='${Environment.GetEnvironmentVariable("PACKAGE_DROP_SHARE")}'
default NUGET_PUBLISH_FEED='${Environment.GetEnvironmentVariable("NUGET_PUBLISH_FEED")}'
default APIKEY='${Environment.GetEnvironmentVariable("APIKEY")}'
default NATIVE_CACHE_VERSION = '${Environment.GetEnvironmentVariable("DOTNET_BUILD_VERSION")}'
default UNIVERSECOHERENCE_BUILD = '${Environment.GetEnvironmentVariable("COHERENCE_UNIVERSECOHERENCE_BUILD_NUMBER")}'
default CORECLR_BUILD = '${Environment.GetEnvironmentVariable("COHERENCE_CORECLR_BUILD_NUMBER")}'
default DISABLE_PRODUCT_SANITYCHECK = '${Environment.GetEnvironmentVariable("DISABLE_COHERENCE_CHECK") == "true"}'
default DISABLE_PARTNER_SANITYCHECK = '${Environment.GetEnvironmentVariable("DISABLE_PARTNER_COHERENCE_CHECK") == "true"}'

use-standard-lifecycle

#package-restore target='initialize'
  exec program='dotnet' commandline='restore --infer-runtimes src'
  exec program='dotnet' commandline='restore project.json --configfile ${BASE_DIR}/NuGet.config --packages ${TOOLS_DOWNLOAD_PATH} -v Minimal'

#copy-bits target='package'
  var args = '--drop-folder ${BUILD_SHARE} --build-branch ${BUILD_BRANCH} --output-path ${TARGET_DIR} --universecoherence-build ${UNIVERSECOHERENCE_BUILD} --coreclr-build ${CORECLR_BUILD}'
  @{
     if (DISABLE_PARTNER_SANITYCHECK)
     {
       args += " --disable-partner-package-verification ";
     }

     if (DISABLE_PRODUCT_SANITYCHECK)
     {
       args += " --disable-product-package-verification ";
     }

     if (!string.IsNullOrEmpty(NUGET_PUBLISH_FEED))
     {
       args += string.Format(" --nuget-publish-feed {0} --api-key {1}", NUGET_PUBLISH_FEED, APIKEY);
     }
  }

  exec program='dotnet' commandline='run -f net451 -- ${args}' workingdir='${COHERENCE_BUILD_PROJ}'

#split-packages target='package'
  var splitPackagesExe = '${Directory.GetFiles(TOOLS_DOWNLOAD_PATH, "SplitPackages.exe", SearchOption.AllDirectories).First()}'
  var splitArgs = '--source ${BUILD_DIR} --csv ${SPLIT_CSV_PATH} --destination ${TARGET_DIR}'
  exec program='${splitPackagesExe}' commandline='${splitArgs}' workingdir='${COHERENCE_BUILD_PROJ}'

#run-test-restore
  var restoreDirectory='${BASE_DIR}/.test-restore'
  var restoreArgs = '${TARGET_DIR}/ship/project.json --source ${TARGET_DIR}/ship --source ${TARGET_DIR}/ext --fallbacksource https://api.nuget.org/v3/index.json --packages ${restoreDirectory}'
  @{
    try
    {
        Exec("dotnet", "restore " + restoreArgs);
    }
    finally
    {
        if (Directory.Exists(restoreDirectory))
        {
            Directory.Delete(restoreDirectory, recursive: true);
        }
    }
  }

macro name='Exec' program='string' commandline='string'
    exec