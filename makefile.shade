use namespace="System"
use namespace="System.Collections.Concurrent"
use namespace="System.Diagnostics"
use namespace="System.IO"
use import="Files"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_BRANCH='${Environment.GetEnvironmentVariable("BUILD_BRANCH")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default SANITY_CHECKER='${Path.Combine(SRC_DIR, "SanityCheck")}'
default NUGET_FEED='${Environment.GetEnvironmentVariable("NUGET_FEED")}'
default NUGET_SYMBOLS_FEED='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_FEED")}'
default DROP_SHARE='${Environment.GetEnvironmentVariable("DROP_SHARE")}'
default PACKAGE_DROP_SHARE='${Environment.GetEnvironmentVariable("PACKAGE_DROP_SHARE")}'
default NUGET_SYMBOLS_SHARE='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_SHARE")}'
default SYMBOLS_NUGET_EXE='${Environment.GetEnvironmentVariable("SYMBOLS_NUGET_EXE")}'

use-standard-lifecycle

#compile-sanity-check target='compile'
  build projectFile='${Path.Combine(SANITY_CHECKER, "SanityCheck.csproj")}'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }
  }

  exec program='${Path.Combine(SANITY_CHECKER, "bin", "Release", "SanityCheck.exe")}' commandline='${BUILD_SHARE} ${BUILD_BRANCH} ${BUILD_DIR} ${SYMBOLS_DIR} ${NUGET_SYMBOLS_SHARE} ${SYMBOLS_NUGET_EXE} '

#nuget-install target='install' description='Publish all coherent packages'
  @{
      if (string.IsNullOrEmpty(PACKAGE_DROP_SHARE))
      {
          Log.Warn("PACKAGE_DROP_SHARE environment varible is not set");
          return;
      }

      var latestPackageFolders = Directory.GetDirectories(PACKAGE_DROP_SHARE);
      var coherentPackageNames = Directory.GetFiles(BUILD_DIR, "*.nupkg").Select(p => Path.GetFileNameWithoutExtension(p));

      var delete = new List<string>();

      foreach (var latestPackageFolder in latestPackageFolders)
      {
          var projectName = Path.GetFileName(latestPackageFolder);

          var matchedVersion = new HashSet<string>(
              coherentPackageNames
                  .Where(packageName => packageName.IndexOf(projectName) == 0)
                  .Select(packageName => packageName.Substring(projectName.Length + 1)));

          if (matchedVersion.Any())
          {
              delete.AddRange(Directory.GetDirectories(latestPackageFolder)
                                       .Where(p => !matchedVersion.Contains(Path.GetFileName(p))));
          }
          else
          {
              delete.Add(latestPackageFolder);
              Console.WriteLine(string.Format("Project {0} doesn't exist in this Coherence build hence it will be deleted from {1}",
                  projectName, PACKAGE_DROP_SHARE));
          }
      }

      foreach (var d in delete)
      {
          Console.WriteLine(string.Format("Delete folder {0}", d));

          // Disable during dry run.
          // Directory.Delete(d, recursive: true);
      }
  }

macro name='NuGetPush' source='string' nupkgFile='string'
  nuget-push
