use namespace="System"
use namespace="System.Collections.Concurrent"
use namespace="System.Diagnostics"
use namespace="System.IO"
use import="Files"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_BRANCH='${Environment.GetEnvironmentVariable("BUILD_BRANCH")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default SANITY_CHECKER='${Path.Combine(SRC_DIR, "SanityCheck")}'
default NUGET_FEED='${Environment.GetEnvironmentVariable("NUGET_FEED")}'
default NUGET_SYMBOLS_FEED='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_FEED")}'
default DROP_SHARE='${Environment.GetEnvironmentVariable("DROP_SHARE")}'
default PACKAGE_DROP_SHARE='${Environment.GetEnvironmentVariable("PACKAGE_DROP_SHARE")}'
default NUGET_SYMBOLS_SHARE='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_SHARE")}'
default SYMBOLS_NUGET_EXE='${Environment.GetEnvironmentVariable("SYMBOLS_NUGET_EXE")}'

use-standard-lifecycle

#compile-sanity-check target='compile'
  build projectFile='${Path.Combine(SANITY_CHECKER, "SanityCheck.csproj")}'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }
  }

  exec program='${Path.Combine(SANITY_CHECKER, "bin", "Release", "SanityCheck.exe")}' commandline='${BUILD_SHARE} ${BUILD_BRANCH} ${BUILD_DIR} ${SYMBOLS_DIR} ${NUGET_SYMBOLS_SHARE} ${SYMBOLS_NUGET_EXE} '

#nuget-install target='install' description='Publish all coherent packages'
  @{
      if (string.IsNullOrEmpty(PACKAGE_DROP_SHARE))
      {
          Log.Warn("PACKAGE_DROP_SHARE environment varible is not set");
          return;
      }

      foreach (var package in Directory.EnumerateDirectories(PACKAGE_DROP_SHARE))
      {
          // delete every thing 
          try 
          {
              Log.Info("Removing " + package);

              // Check in the try run first to ensure correct packages are removed.
              // Directory.Delete(package); 
          }
          catch (IOException) 
          {
              Log.Warn("Fail to delete " + package);
          }
      }
  }
  kpm-publish sourcePackagesDir='${BUILD_DIR}' targetPackagesDir='${PACKAGE_DROP_SHARE}'

macro name='NuGetPush' source='string' nupkgFile='string'
  nuget-push
