use namespace="System"
use namespace="System.Collections.Concurrent"
use namespace="System.Diagnostics"
use namespace="System.IO"
use namespace="System.Threading"
use namespace="System.Threading.Tasks"
use import="Files"
use import="BuildEnv"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default SRC_DIR='${Path.Combine(BASE_DIR, "src")}'
default BUILD_SHARE='${Environment.GetEnvironmentVariable("BUILD_SHARE")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SYMBOLS_DIR='${Path.Combine(TARGET_DIR, "symbols")}'
default SANITY_CHECKER='${Path.Combine(SRC_DIR, "SanityCheck")}'
default NUGET_FEED='${Environment.GetEnvironmentVariable("NUGET_FEED")}'
default NUGET_SYMBOLS_FEED='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_FEED")}'
default DROP_SHARE='${Environment.GetEnvironmentVariable("DROP_SHARE")}'
default NUGET_SYMBOLS_SHARE='${Environment.GetEnvironmentVariable("NUGET_SYMBOLS_SHARE")}'
default SYMBOLS_NUGET_EXE='${Environment.GetEnvironmentVariable("SYMBOLS_NUGET_EXE")}'

use-standard-lifecycle

#compile-sanity-check target='compile'
  build projectFile='${Path.Combine(SANITY_CHECKER, "SanityCheck.csproj")}'

#copy-bits target='package'
  @{
      if (String.IsNullOrEmpty(BUILD_SHARE))
      {
        Log.Warn("BUILD_SHARE environment varible is not set");
        Environment.Exit(-1);
        return;
      }
  }

  exec program='${Path.Combine(SANITY_CHECKER, "bin", "Release", "SanityCheck.exe")}' commandline='${BUILD_SHARE} ${BUILD_DIR} ${SYMBOLS_DIR} ${NUGET_SYMBOLS_SHARE} ${SYMBOLS_NUGET_EXE} '
  
#publish-packages target="package"
  @{
      if (string.IsNullOrEmpty(NUGET_FEED)) 
      {
        Log.Warn("NUGET_FEED environment varible is not set.");
        Environment.Exit(-1);
        return;
      }
      
      if (string.IsNullOrEmpty(DROP_SHARE))
      {
        Log.Warn("DROP_SHARE environment varible is not set.");
        Environment.Exit(-1);
        return;
      }
      
      var lastUploadedFilePath = Path.Combine(DROP_SHARE, "uploaded-files");
      var packages = Directory.EnumerateFiles(BUILD_DIR, "*.nupkg");
      using (var fileList = new UploadedFileList(lastUploadedFilePath))
      {
          while (!fileList.TryRead())
          {
              Log.Warn(lastUploadedFilePath + " currently being used.");
              Thread.Sleep(TimeSpan.FromSeconds(3));
          }
          
          Parallel.ForEach(packages, new ParallelOptions { MaxDegreeOfParallelism  = 5 }, package => 
          {
              var packageInfo = PackageInfo.FromPath(package);
              PackageInfo existing;
              if (fileList.Infos.TryGetValue(packageInfo.Id, out existing) && 
                  existing.Equals(packageInfo))
              {
                  return;
              }
              
              fileList.Infos[packageInfo.Id] = packageInfo;
              NuGetPush(NUGET_FEED, package);
          });
      }
  }
  
functions @{
    private sealed class UploadedFileList : IDisposable
    {
        private readonly string _path;
        private Stream _fileStream;
        
        public UploadedFileList(string path)
        {
            _path = path;
        }
        
        public IDictionary<string, PackageInfo> Infos { get; private set; }
                
        public bool TryRead()
        {
            try
            {
                _fileStream = File.Open(_path, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None);
                ReadContents();
                return true;
            }
            catch (IOException)
            {
                // The file must be locked by another concurrent CI run.
            }
            return false;
        }
        
        private void ReadContents()
        {
            Infos = new ConcurrentDictionary<string, PackageInfo>(StringComparer.OrdinalIgnoreCase);
            var reader = new StreamReader(_fileStream);
            var contents = reader.ReadToEnd();
            foreach (var line in contents.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
            {
                var tabs = line.Split(new[] {","}, StringSplitOptions.RemoveEmptyEntries);
                Infos.Add(tabs[0], new PackageInfo { Id = tabs[0], Version = tabs[1], Hash = tabs[2] });
            }
        }
        
        private void UpdateContents()
        {
            _fileStream.Position = 0;
            var writer = new StreamWriter(_fileStream);
            foreach (var item in Infos.Values)
            {
                writer.WriteLine("{0},{1},{2}", item.Id, item.Version, item.Hash);
            }
            writer.Flush();
        }
        
        public void Dispose()
        {
            if (_fileStream != null)
            {
                UpdateContents();
                _fileStream.Dispose();
            }
        }
    }
    
    private class PackageInfo : IEquatable<PackageInfo>
    {
        private static readonly Regex _packageNameRegex = new Regex(@"^(?<id>.+?)\.(?<version>[0-9].*)$");
        private string _hash;
        
        public string Id { get; set; }
            
        public string Version { get; set; }
        
        private string Path { get; set; }
        
        public string Hash 
        { 
            get
            {
                if (_hash == null)
                {
                    using (var md5 = System.Security.Cryptography.MD5.Create())
                    using (var fileStream = File.OpenRead(Path))
                    {
                        _hash = Convert.ToBase64String(md5.ComputeHash(fileStream));
                    }
                }
                return _hash;
            }
            set
            {
                _hash = value;
            }
        }
            
        public static PackageInfo FromPath(string path)
        {
            var fileName = System.IO.Path.GetFileNameWithoutExtension(path);
            var match = _packageNameRegex.Match(fileName);
            if (!match.Success)
            {
                throw new InvalidOperationException("Can't parse file " + path);
            }
            return new PackageInfo
            {
              Id = match.Groups["id"].Value,
              Version = match.Groups["version"].Value,
              Path = path
            };
        }
        
        public bool Equals(PackageInfo other)
        {
            return string.Equals(Id, other.Id, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals(Version, other.Version, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals(Hash, other.Hash, StringComparison.OrdinalIgnoreCase);
        }
    }
}
  
macro name='NuGetPush' source='string' nupkgFile='string'
  nuget-push
